name: AtaraxAI CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test_and_lint_backend:
    name: Test & Lint Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake libgomp1 libcurl4-openssl-dev ccache portaudio19-dev python3-pyaudio

      - name: Create and activate Python venv
        run: |
          python -m venv .venv
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "PATH=$PWD/.venv/bin:$PATH" >> $GITHUB_ENV
          python -m pip install --upgrade pip setuptools wheel

      - name: Build C++ extension and install Python dependencies
        run: |
          ./install.sh --clean
          python -m pip install -e .[dev]

      - name: Download test models
        run: |
          mkdir -p test_assets
          wget -q -O test_assets/tinyllama.gguf "https://huggingface.co/TheBloke/TinyLlama-1.1B-Chat-v1.0-GGUF/resolve/main/tinyllama-1.1b-chat-v1.0.Q2_K.gguf"
          wget -q -O test_assets/ggml-tiny.en.bin "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-tiny.en.bin"

      - name: Run C++ Unit Tests
        run: |
          cd build/ataraxai/hegemonikon/
          ctest --output-on-failure --verbose

      - name: Run Python Unit Tests
        run: |
          pytest -m unit --cov=ataraxai --cov-report=term-missing

      - name: Run Python Integration Tests
        if: github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main' || github.ref == 'refs/heads/main'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          pytest -m integration --cov=ataraxai --cov-report=term-missing

      - name: Lint with Ruff
        run: |
          ruff check ataraxai

      - name: Type Check with MyPy
        run: |
          mypy ataraxai


  build_desktop_release:
    name: Build Desktop App on ${{ matrix.os }}
    needs: test_and_lint_backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - name: Install uv build tool
        run: pip install uv

      - name: Install Rust
        run: rustup update stable && rustup default stable

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Make build script executable
        if: matrix.os != 'windows-latest'
        run: chmod +x build_backend.sh

      - name: Install frontend dependencies
        working-directory: ./ataraxai-ui
        run: npm install

      - name: Build backend artifact
        run: ./build_backend.sh

      - name: Build Tauri application
        working-directory: ./ataraxai-ui
        run: npm run tauri build

      - name: Upload Desktop App Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AtaraxAI-${{ matrix.os }}
          path: |
            ataraxai-ui/src-tauri/target/release/bundle/**/*.dmg
            ataraxai-ui/src-tauri/target/release/bundle/**/*.msi
            ataraxai-ui/src-tauri/target/release/bundle/**/*.AppImage
            ataraxai-ui/src-tauri/target/release/bundle/**/*.deb


  deploy_docker:
    name: Deploy to Docker Hub
    needs: test_and_lint_backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.cpu
          push: true
          tags: ataraxai/ataraxai:latest,ataraxai/ataraxai:${{ github.sha }}
